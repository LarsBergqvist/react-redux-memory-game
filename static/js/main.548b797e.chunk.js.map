{"version":3,"sources":["actions.js","cardFunctions.js","reducers.js","CardView.js","NumCardsSelectionView.js","GameStatusView.js","GameView.js","index.js"],"names":["FLIP_UP_CARD","SHUFFLE_CARDS","CHECK_UNMATCHED_PAIR","CHECK_MATCHED_PAIR","MARK_PAIR_AS_MATCHED","FLIP_DOWN_PAIR","INIT_GAME","GENERATE_PAIRS","SHOW_NUM_CARDS_SELECTION","generatePairs","numPairs","type","initGame","flipDownPair","id1","id2","markPairAsMatched","checkUnmatchedPair","checkMatchedPair","shuffleCards","generateCardSet","cards","id","i","card1","image","imageUp","matched","card2","push","getCard","find","c","cardsHaveIdenticalImages","initialState","turnNo","pairsFound","numClicksWithinTurn","firstId","undefined","secondId","gameComplete","showNumCardsSelection","memoryCards","state","action","map","card","Object","assign","newCards","shuffle","memoryGame","length","s1","s2","numClicks","CardView","props","imPath","window","location","href","backPath","className","classNameWithAnimation","onClick","src","draggable","alt","NumCardsSelectionView","onInitGame","MAX_PAIRS","GameStatusView","onShowNumCardsSelection","timeOut","GameView","connect","dispatch","onCardClicked","clearInterval","flipUpCard","setTimeout","cardViews","gameHUD","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.548b797e.chunk.js","sourcesContent":["export const FLIP_UP_CARD = 'FLIP_UP_CARD';\nexport const SHUFFLE_CARDS = 'SHUFFLE_CARDS';\nexport const CHECK_UNMATCHED_PAIR = 'CHECK_UNMATCHED_PAIR';\nexport const CHECK_MATCHED_PAIR = 'CHECK_MATCHED_PAIR';\nexport const MARK_PAIR_AS_MATCHED = 'MARK_PAIR_AS_MATCHED';\nexport const FLIP_DOWN_PAIR = 'FLIP_DOWN_PAIR';\nexport const INIT_GAME = 'INIT_GAME';\nexport const GENERATE_PAIRS = 'GENERATE_PAIRS';\nexport const SHOW_NUM_CARDS_SELECTION = 'SHOW_NUM_CARDS_SELECTION';\n\nexport function showNumCardsSelection() {\n    return { type: SHOW_NUM_CARDS_SELECTION };\n}\n\nexport function generatePairs(numPairs) {\n    return { type: GENERATE_PAIRS, numPairs };\n}\n\nexport function initGame(numPairs) {\n    return { type: INIT_GAME, numPairs };\n}\n\nexport function flipDownPair(id1, id2) {\n    return { type: FLIP_DOWN_PAIR, id1, id2 }\n}\nexport function markPairAsMatched(id1, id2) {\n    return { type: MARK_PAIR_AS_MATCHED, id1, id2 }\n}\n\nexport function checkUnmatchedPair() {\n    return { type: CHECK_UNMATCHED_PAIR };\n}\n\nexport function checkMatchedPair() {\n    return { type: CHECK_MATCHED_PAIR };\n}\n\nexport function flipUpCard(id) {\n    return { type: FLIP_UP_CARD, id };\n}\n\nexport function shuffleCards() {\n    return { type: SHUFFLE_CARDS };\n}\n","export const MAX_PAIRS = 10;\n\nexport function generateCardSet(numPairs) {\n    //\n    // Generate a set of cards with image pairs\n    //\n    const cards = [];\n    let id = 1;\n    for (let i = 1; i <= numPairs; i++) {\n        const card1 = {\n            id: id,\n            image: i,\n            imageUp: false,\n            matched: false\n        };\n        id++;\n        const card2 = {\n            id: id,\n            image: i,\n            imageUp: false,\n            matched: false\n        };\n        cards.push(card1);\n        cards.push(card2);\n        id++;\n    }\n\n    return cards;\n}\n\nexport function getCard(id, cards) {\n    return cards.find(c => c.id === id)\n}\n\nexport function cardsHaveIdenticalImages(id1, id2, cards) {\n    if (getCard(id1, cards).image === getCard(id2, cards).image) {\n        return true;\n    } else {\n        return false;\n    }\n}\n","import {\n    GENERATE_PAIRS, FLIP_UP_CARD, SHUFFLE_CARDS, CHECK_UNMATCHED_PAIR, markPairAsMatched,\n    MARK_PAIR_AS_MATCHED, flipDownPair, FLIP_DOWN_PAIR, INIT_GAME,\n    shuffleCards, checkUnmatchedPair, checkMatchedPair, generatePairs, SHOW_NUM_CARDS_SELECTION, CHECK_MATCHED_PAIR\n} from './actions';\nimport shuffle from 'shuffle-array';\nimport { generateCardSet, getCard, cardsHaveIdenticalImages } from './cardFunctions';\n\nconst initialState = {\n    turnNo: 1,\n    pairsFound: 0,\n    numClicksWithinTurn: 0,\n    firstId: undefined,\n    secondId: undefined,\n    gameComplete: false,\n    showNumCardsSelection: false,\n    cards: []\n};\n\n// The reducer for the memory card array\n// state is an array of cards\nfunction memoryCards(state = [], action) {\n    switch (action.type) {\n        case FLIP_UP_CARD:\n            return state.map((card) => {\n                if (action.id === card.id) {\n                    return Object.assign({}, card, {\n                        imageUp: true\n                    });\n                }\n                return card;\n            });\n\n        case MARK_PAIR_AS_MATCHED:\n            return state.map((card) => {\n                if (action.id1 === card.id || action.id2 === card.id) {\n                    return Object.assign({}, card, {\n                        matched: true\n                    })\n                }\n                return card;\n            });\n\n        case FLIP_DOWN_PAIR:\n            return state.map((card) => {\n                if (action.id1 === card.id || action.id2 === card.id) {\n                    return Object.assign({}, card, {\n                        imageUp: false\n                    })\n                }\n                return card;\n            });\n\n        case GENERATE_PAIRS:\n            return generateCardSet(action.numPairs);\n\n        case SHUFFLE_CARDS: {\n            let newCards = [...state];\n            newCards = shuffle(newCards);\n            return newCards;\n        }\n\n        default:\n            return state;\n    }\n}\n\n// The reducer for the game\n// state is an object with game state and an array of cards\nfunction memoryGame(state = initialState, action) {\n    switch (action.type) {\n        case SHOW_NUM_CARDS_SELECTION:\n            return Object.assign({}, initialState, { showNumCardsSelection: true });\n\n        case GENERATE_PAIRS:\n            return Object.assign({}, initialState, { cards: memoryCards(initialState.cards, generatePairs(action.numPairs)) });\n\n        case INIT_GAME: {\n            const cards = memoryCards(initialState.cards, generatePairs(action.numPairs));\n            return Object.assign({}, initialState, { showNumCardsSelection: false, cards: memoryCards(cards, shuffleCards()) });\n        }\n\n        case CHECK_UNMATCHED_PAIR: {\n            if (state.numClicksWithinTurn === 2 && !cardsHaveIdenticalImages(state.firstId, state.secondId, state.cards)) {\n                // PAIR DID NOT MATCH\n                return Object.assign({}, state, {\n                    numClicksWithinTurn: 0,\n                    firstId: undefined,\n                    secondId: undefined,\n                    turnNo: state.turnNo + 1,\n                    cards: memoryCards(state.cards, flipDownPair(state.firstId, state.secondId))\n                });\n            }\n            return state;\n        }\n\n        case CHECK_MATCHED_PAIR: {\n            if (state.numClicksWithinTurn === 2 && cardsHaveIdenticalImages(state.firstId, state.secondId, state.cards)) {\n                // PAIR MATCHED\n                const pairsFound = state.pairsFound + 1;\n                let gameComplete = false;\n                if (pairsFound === state.cards.length / 2) {\n                    gameComplete = true;\n                }\n                return Object.assign({}, state, {\n                    pairsFound,\n                    turnNo: state.turnNo + 1,\n                    numClicksWithinTurn: 0,\n                    gameComplete,\n                    cards: memoryCards(state.cards, markPairAsMatched(state.firstId, state.secondId))\n                });\n            }\n            return state;\n        }\n\n        case FLIP_UP_CARD: {\n            const card = getCard(action.id, state.cards);\n            if (card.imageUp || card.matched) {\n                // Selected an already flipped card\n                // or a card that has already been matched\n                return state;\n            }\n\n            if (state.numClicksWithinTurn === 2) {\n                // Two cards are already flipped\n                // Check for match/unmatch and trigger a new flip\n                const s1 = memoryGame(state, checkMatchedPair());\n                const s2 = memoryGame(s1, checkUnmatchedPair());\n                return Object.assign({}, s2, { firstId: action.id, numClicksWithinTurn: 1 }, { cards: memoryCards(s2.cards, action) });\n            }\n\n            let firstId = state.firstId;\n            let secondId = state.secondId;\n            if (state.numClicksWithinTurn === 0) {\n                firstId = action.id;\n            } else {\n                secondId = action.id;\n            }\n            const numClicks = state.numClicksWithinTurn + 1;\n\n            return Object.assign({}, state, {\n                firstId,\n                secondId,\n                numClicksWithinTurn: numClicks,\n                cards: memoryCards(state.cards, action)\n            });\n        }\n\n        case SHUFFLE_CARDS:\n            return Object.assign({}, state, { cards: memoryCards(state.cards, action) });\n\n        default:\n            return state;\n    }\n}\n\nexport default memoryGame;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Game.css';\n\nconst CardView = props => {\n    const imPath = `${window.location.href}/images/${props.image}.jpg`;\n    const backPath = `${window.location.href}/images/back.jpg`;\n\n    let className = 'card flip-card';\n    if (props.matched) {\n        className = className + ' matched';\n    }\n    const classNameWithAnimation = className + ' animate';\n\n    return (\n        <div\n            onClick={() => {\n                if (!props.matched && !props.imageUp) {\n                    props.onClick(props.id);\n                }\n            }}\n            className={props.imageUp ? classNameWithAnimation : className}\n        >\n            <div className=\"flip-card-inner\">\n                <div className=\"flip-card-front\">\n                    <img src={`${backPath}`} draggable='false' alt='' />\n                </div>\n                <div className=\"flip-card-back\">\n                    <img src={`${imPath}`} draggable='false' alt='' />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nCardView.propTypes = {\n    matched: PropTypes.bool,\n    imageUp: PropTypes.bool,\n    onClick: PropTypes.func,\n    id: PropTypes.number,\n    image: PropTypes.number\n};\n\nexport default CardView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { MAX_PAIRS } from './cardFunctions';\n\nconst NumCardsSelectionView = props =>\n    <>\n        <div>Select number of cards for new game</div>\n        <div className='num-cards-button-container'>\n            <button onClick={() => props.onInitGame(3)}>{6}</button>\n            <button onClick={() => props.onInitGame(MAX_PAIRS / 2)}>{MAX_PAIRS}</button>\n            <button onClick={() => props.onInitGame(MAX_PAIRS)}>{MAX_PAIRS * 2}</button>\n        </div>\n    </>;\n\nNumCardsSelectionView.propTypes = {\n    onInitGame: PropTypes.func\n};\n\nexport default NumCardsSelectionView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GameStatusView = props => {\n    if (props.gameComplete) {\n        return <>\n            <div>GAME COMPLETE!</div>\n            <div>You used {props.turnNo - 1} turns</div>\n            <div><button className='game-button' onClick={props.onShowNumCardsSelection}>Play again?</button></div>\n        </>;\n    } else {\n        return <>\n            <div>\n                Turn: {props.turnNo}   Pairs found: {props.pairsFound}\n            </div>\n            <button className='game-button' onClick={props.onShowNumCardsSelection}>Restart game</button>\n        </>;\n    }\n}\n\nGameStatusView.propTypes = {\n    gameComplete: PropTypes.bool,\n    onShowNumCardsSelection: PropTypes.func,\n    turnNo: PropTypes.number\n};\n\nexport default GameStatusView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Game.css';\nimport CardView from './CardView';\nimport { connect } from 'react-redux'\nimport { flipUpCard, checkUnmatchedPair, checkMatchedPair, initGame, showNumCardsSelection } from './actions';\nimport NumCardsSelectionView from './NumCardsSelectionView';\nimport GameStatusView from './GameStatusView';\n\nlet timeOut = null;\n\nconst Game = props => {\n    const cardViews = props.cards.map(c =>\n        <CardView key={c.id}\n            id={c.id}\n            image={c.image}\n            imageUp={c.imageUp}\n            matched={c.matched}\n            onClick={props.onCardClicked} />\n    );\n\n    let gameHUD = undefined;\n\n    if (props.showNumCardsSelection) {\n        gameHUD = <NumCardsSelectionView onInitGame={props.onInitGame} />;\n    } else {\n        gameHUD = <GameStatusView\n            gameComplete={props.gameComplete}\n            turnNo={props.turnNo}\n            pairsFound={props.pairsFound}\n            onShowNumCardsSelection={props.onShowNumCardsSelection}\n        />;\n    }\n\n    return (\n        <div className='game'>\n            <header className='game-header'>\n                <div className='game-title'>A Memory game in React with Redux</div>\n            </header>\n            <div className='game-status'>\n                {gameHUD}\n            </div>\n            <div className='card-container'>\n                {cardViews}\n            </div>\n        </div>\n    );\n}\n\nGame.propTypes = {\n    gameComplete: PropTypes.bool,\n    showNumCardsSelection: PropTypes.bool,\n    onShowNumCardsSelection: PropTypes.func,\n    cards: PropTypes.array,\n    onCardClicked: PropTypes.func,\n    onInitGame: PropTypes.func,\n    turnNo: PropTypes.number,\n    pairsFound: PropTypes.number\n};\n\nconst mapStateToProps = state => {\n    return {\n        cards: state.cards,\n        turnNo: state.turnNo,\n        gameComplete: state.gameComplete,\n        pairsFound: state.pairsFound,\n        showNumCardsSelection: state.showNumCardsSelection\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCardClicked: id => {\n            clearInterval(timeOut);\n            dispatch(flipUpCard(id));\n            dispatch(checkMatchedPair());\n            timeOut = setTimeout(() => {\n                dispatch(checkUnmatchedPair())\n            }, 4000);\n        },\n        onShowNumCardsSelection: () => {\n            dispatch(showNumCardsSelection());\n        },\n        onInitGame: numPairs => {\n            dispatch(initGame(numPairs));\n        }\n    }\n}\n\nconst GameView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Game)\n\nexport default GameView;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport memoryGame from './reducers';\nimport { initGame } from './actions';\nimport { Provider } from 'react-redux';\nimport { MAX_PAIRS } from './cardFunctions';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport GameView from './GameView';\n\n// For integration with Redux DevTools in browser\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(memoryGame, composeEnhancers(\n    applyMiddleware(thunk)\n));\nstore.dispatch(initGame(MAX_PAIRS));\n\nReactDOM.render(\n    <Provider store={store}>\n        <GameView />\n    </Provider>\n    , document.getElementById('root'));\n"],"sourceRoot":""}