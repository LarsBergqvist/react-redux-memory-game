{"version":3,"sources":["CardView.js","actions.js","cardFunctions.js","NumCardsSelectionView.js","GameStatusView.js","Game.js","App.js","reducers.js","index.js"],"names":["CardView","props","imPath","window","location","href","image","backPath","className","matched","classNameWithAnimation","onClick","imageUp","id","src","draggable","alt","FLIP_UP_CARD","SHUFFLE_CARDS","CHECK_UNMATCHED_PAIR","CHECK_MATCHED_PAIR","MARK_PAIR_AS_MATCHED","FLIP_DOWN_PAIR","INIT_GAME","GENERATE_PAIRS","SHOW_NUM_CARDS_SELECTION","generatePairs","numPairs","type","initGame","flipDownPair","id1","id2","markPairAsMatched","checkUnmatchedPair","checkMatchedPair","shuffleCards","generateCardSet","cards","i","card1","card2","push","getCard","find","c","cardsHaveIdenticalImages","NumCardsSelectionView","onInitGame","MAX_PAIRS","GameStatusView","gameComplete","turnNo","onShowNumCardsSelection","pairsFound","timeOut","Game","cardViews","this","getCardViews","gameHUD","undefined","showNumCardsSelection","map","onCardClicked","Component","GameView","connect","state","dispatch","clearInterval","flipUpCard","setTimeout","App","initialState","numClicksWithinTurn","firstId","secondId","memoryCards","action","card","Object","assign","newCards","shuffle","memoryGame","length","s1","s2","numClicks","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4824d8e.chunk.js","sourcesContent":["import './Game.css';\n\nfunction CardView(props) {\n    const imPath = `${window.location.href}/images/${props.image}.jpg`;\n    const backPath = `${window.location.href}/images/back.jpg`;\n\n    let className = 'card flip-card';\n    if (props.matched) {\n        className = className + ' matched';\n    }\n    const classNameWithAnimation = className + ' animate';\n\n    return (\n        <div\n            onClick={() => {\n                if (!props.matched && !props.imageUp) {\n                    props.onClick(props.id);\n                }\n            }}\n            className={props.imageUp ? classNameWithAnimation : className}\n        >\n            <div className=\"flip-card-inner\">\n                <div className=\"flip-card-front\">\n                    <img src={`${backPath}`} draggable='false' alt='' />\n                </div>\n                <div className=\"flip-card-back\">\n                    <img src={`${imPath}`} draggable='false' alt='' />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CardView;\n","export const FLIP_UP_CARD = 'FLIP_UP_CARD';\nexport const SHUFFLE_CARDS = 'SHUFFLE_CARDS';\nexport const CHECK_UNMATCHED_PAIR = 'CHECK_UNMATCHED_PAIR';\nexport const CHECK_MATCHED_PAIR = 'CHECK_MATCHED_PAIR';\nexport const MARK_PAIR_AS_MATCHED = 'MARK_PAIR_AS_MATCHED';\nexport const FLIP_DOWN_PAIR = 'FLIP_DOWN_PAIR';\nexport const INIT_GAME = 'INIT_GAME';\nexport const GENERATE_PAIRS = 'GENERATE_PAIRS';\nexport const SHOW_NUM_CARDS_SELECTION = 'SHOW_NUM_CARDS_SELECTION';\n\nexport function showNumCardsSelection() {\n    return { type: SHOW_NUM_CARDS_SELECTION };\n}\n\nexport function generatePairs(numPairs) {\n    return { type: GENERATE_PAIRS, numPairs };\n}\n\nexport function initGame(numPairs) {\n    return { type: INIT_GAME, numPairs };\n}\n\nexport function flipDownPair(id1, id2) {\n    return { type: FLIP_DOWN_PAIR, id1, id2 }\n}\nexport function markPairAsMatched(id1, id2) {\n    return { type: MARK_PAIR_AS_MATCHED, id1, id2 }\n}\n\nexport function checkUnmatchedPair() {\n    return { type: CHECK_UNMATCHED_PAIR };\n}\n\nexport function checkMatchedPair() {\n    return { type: CHECK_MATCHED_PAIR };\n}\n\nexport function flipUpCard(id) {\n    return { type: FLIP_UP_CARD, id };\n}\n\nexport function shuffleCards() {\n    return { type: SHUFFLE_CARDS };\n}\n","export const MAX_PAIRS = 10;\n\nexport function generateCardSet(numPairs) {\n    //\n    // Generate a set of cards with image pairs\n    //\n    const cards = [];\n    let id = 1;\n    for (let i = 1; i <= numPairs; i++) {\n        const card1 = {\n            id: id,\n            image: i,\n            imageUp: false,\n            matched: false\n        };\n        id++;\n        const card2 = {\n            id: id,\n            image: i,\n            imageUp: false,\n            matched: false\n        };\n        cards.push(card1);\n        cards.push(card2);\n        id++;\n    }\n\n    return cards;\n};\n\nexport function getCard(id, cards) {\n    return cards.find(c => c.id === id)\n}\n\nexport function cardsHaveIdenticalImages(id1, id2, cards) {\n    if (getCard(id1, cards).image === getCard(id2, cards).image) {\n        return true;\n    } else {\n        return false;\n    }\n}\n","import { MAX_PAIRS } from './cardFunctions';\n\nfunction NumCardsSelectionView(props) {\n    return <>\n        <div>Select number of cards for new game</div>\n        <div className='num-cards-button-container'>\n            <button onClick={() => props.onInitGame(3)}>{6}</button>\n            <button onClick={() => props.onInitGame(MAX_PAIRS / 2)}>{MAX_PAIRS}</button>\n            <button onClick={() => props.onInitGame(MAX_PAIRS)}>{MAX_PAIRS * 2}</button>\n        </div>\n    </>;\n}\n\nexport default NumCardsSelectionView;\n","function GameStatusView(props) {\n    if (props.gameComplete) {\n        return <>\n            <div>GAME COMPLETE!</div>\n            <div>You used {props.turnNo - 1} turns</div>\n            <div><button className='game-button' onClick={props.onShowNumCardsSelection}>Play again?</button></div>\n        </>;\n    } else {\n        return <>\n            <div>\n                Turn: {props.turnNo}   Pairs found: {props.pairsFound}\n            </div>\n            <button className='game-button' onClick={props.onShowNumCardsSelection}>Restart game</button>\n        </>;\n    }\n}\n\nexport default GameStatusView;\n","import React, { Component } from 'react';\nimport './Game.css';\nimport CardView from './CardView';\nimport { connect } from 'react-redux'\nimport { flipUpCard, checkUnmatchedPair, checkMatchedPair, initGame, showNumCardsSelection } from './actions';\nimport NumCardsSelectionView from './NumCardsSelectionView';\nimport GameStatusView from './GameStatusView';\n\nlet timeOut = null;\n\nclass Game extends Component {\n    render() {\n        const cardViews = this.getCardViews();\n        let gameHUD = undefined;\n\n        if (this.props.showNumCardsSelection) {\n            gameHUD = <NumCardsSelectionView onInitGame={this.props.onInitGame} />;\n        } else {\n            gameHUD = <GameStatusView\n                gameComplete={this.props.gameComplete}\n                turnNo={this.props.turnNo}\n                pairsFound={this.props.pairsFound}\n                onShowNumCardsSelection={this.props.onShowNumCardsSelection}\n            />;\n        }\n\n        return (\n            <div className='game'>\n                <header className='game-header'>\n                    <div className='game-title'>A Memory game in React with Redux</div>\n                </header>\n                <div className='game-status'>\n                    {gameHUD}\n                </div>\n                <div className='card-container'>\n                    {cardViews}\n                </div>\n            </div>\n        );\n    }\n\n    getCardViews() {\n        const cardViews = this.props.cards.map(c =>\n            <CardView key={c.id}\n                id={c.id}\n                image={c.image}\n                imageUp={c.imageUp}\n                matched={c.matched}\n                onClick={this.props.onCardClicked} />\n        );\n        return cardViews;\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        cards: state.cards,\n        turnNo: state.turnNo,\n        gameComplete: state.gameComplete,\n        pairsFound: state.pairsFound,\n        showNumCardsSelection: state.showNumCardsSelection\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCardClicked: id => {\n            clearInterval(timeOut);\n            dispatch(flipUpCard(id));\n            dispatch(checkMatchedPair());\n            timeOut = setTimeout(() => {\n                dispatch(checkUnmatchedPair())\n            }, 4000);\n        },\n        onShowNumCardsSelection: () => {\n            dispatch(showNumCardsSelection());\n        },\n        onInitGame: numPairs => {\n            dispatch(initGame(numPairs));\n        }\n    }\n}\n\nconst GameView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Game)\n\nexport default GameView;\n\n","import React from 'react';\nimport GameView from './Game';\n\nfunction App() {\n    return (\n        <GameView />\n    );\n}\n\nexport default App;\n","import {\n    GENERATE_PAIRS, FLIP_UP_CARD, SHUFFLE_CARDS, CHECK_UNMATCHED_PAIR, markPairAsMatched,\n    MARK_PAIR_AS_MATCHED, flipDownPair, FLIP_DOWN_PAIR, INIT_GAME,\n    shuffleCards, checkUnmatchedPair, checkMatchedPair, generatePairs, SHOW_NUM_CARDS_SELECTION, CHECK_MATCHED_PAIR\n} from \"./actions\";\nimport shuffle from 'shuffle-array';\nimport { generateCardSet, getCard, cardsHaveIdenticalImages } from './cardFunctions';\n\nconst initialState = {\n    turnNo: 1,\n    pairsFound: 0,\n    numClicksWithinTurn: 0,\n    firstId: undefined,\n    secondId: undefined,\n    gameComplete: false,\n    showNumCardsSelection: false,\n    cards: []\n};\n\n// The reducer for the memory card array\n// state is an array of cards\nfunction memoryCards(state = [], action) {\n    switch (action.type) {\n        case FLIP_UP_CARD:\n            return state.map((card) => {\n                if (action.id === card.id) {\n                    return Object.assign({}, card, {\n                        imageUp: true\n                    });\n                }\n                return card;\n            });\n\n        case MARK_PAIR_AS_MATCHED:\n            return state.map((card) => {\n                if (action.id1 === card.id || action.id2 === card.id) {\n                    return Object.assign({}, card, {\n                        matched: true\n                    })\n                }\n                return card;\n            });\n\n        case FLIP_DOWN_PAIR:\n            return state.map((card) => {\n                if (action.id1 === card.id || action.id2 === card.id) {\n                    return Object.assign({}, card, {\n                        imageUp: false\n                    })\n                }\n                return card;\n            });\n\n        case GENERATE_PAIRS:\n            return generateCardSet(action.numPairs);\n\n        case SHUFFLE_CARDS:\n            let newCards = [...state];\n            newCards = shuffle(newCards);\n            return newCards;\n\n        default:\n            return state;\n    }\n}\n\n// The reducer for the game\n// state is an object with game state and an array of cards\nfunction memoryGame(state = initialState, action) {\n    switch (action.type) {\n        case SHOW_NUM_CARDS_SELECTION:\n            return Object.assign({}, initialState, { showNumCardsSelection: true });\n\n        case GENERATE_PAIRS:\n            return Object.assign({}, initialState, { cards: memoryCards(initialState.cards, generatePairs(action.numPairs)) });\n\n        case INIT_GAME:\n            const cards = memoryCards(initialState.cards, generatePairs(action.numPairs));\n            return Object.assign({}, initialState, { showNumCardsSelection: false, cards: memoryCards(cards, shuffleCards()) });\n\n        case CHECK_UNMATCHED_PAIR:\n            if (state.numClicksWithinTurn === 2 && !cardsHaveIdenticalImages(state.firstId, state.secondId, state.cards)) {\n                // PAIR DID NOT MATCH\n                return Object.assign({}, state, {\n                    numClicksWithinTurn: 0,\n                    firstId: undefined,\n                    secondId: undefined,\n                    turnNo: state.turnNo + 1,\n                    cards: memoryCards(state.cards, flipDownPair(state.firstId, state.secondId))\n                });\n            }\n            return state;\n\n        case CHECK_MATCHED_PAIR:\n            if (state.numClicksWithinTurn === 2 && cardsHaveIdenticalImages(state.firstId, state.secondId, state.cards)) {\n                // PAIR MATCHED\n                const pairsFound = state.pairsFound + 1;\n                let gameComplete = false;\n                if (pairsFound === state.cards.length / 2) {\n                    gameComplete = true;\n                }\n                return Object.assign({}, state, {\n                    pairsFound,\n                    turnNo: state.turnNo + 1,\n                    numClicksWithinTurn: 0,\n                    gameComplete,\n                    cards: memoryCards(state.cards, markPairAsMatched(state.firstId, state.secondId))\n                });\n            }\n            return state;\n\n        case FLIP_UP_CARD:\n            const card = getCard(action.id, state.cards);\n            if (card.imageUp || card.matched) {\n                // Selected an already flipped card\n                // or a card that has already been matched\n                return state;\n            }\n\n            if (state.numClicksWithinTurn === 2) {\n                // Two cards are already flipped\n                // Check for match/unmatch and trigger a new flip\n                const s1 = memoryGame(state, checkMatchedPair());\n                const s2 = memoryGame(s1, checkUnmatchedPair());\n                return Object.assign({}, s2, { firstId: action.id, numClicksWithinTurn: 1 }, { cards: memoryCards(s2.cards, action) });\n            }\n\n            let firstId = state.firstId;\n            let secondId = state.secondId;\n            if (state.numClicksWithinTurn === 0) {\n                firstId = action.id;\n            } else {\n                secondId = action.id;\n            }\n            const numClicks = state.numClicksWithinTurn + 1;\n\n            return Object.assign({}, state, {\n                firstId,\n                secondId,\n                numClicksWithinTurn: numClicks,\n                cards: memoryCards(state.cards, action)\n            });\n\n        case SHUFFLE_CARDS:\n            return Object.assign({}, state, { cards: memoryCards(state.cards, action) });\n\n        default:\n            return state;\n    }\n}\n\nexport default memoryGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport memoryGame from './reducers'\nimport { initGame } from './actions';\nimport { Provider } from 'react-redux';\nimport { MAX_PAIRS } from './cardFunctions';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\n// For integration with Redux DevTools in browser\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(memoryGame, composeEnhancers(\n    applyMiddleware(thunk)\n));\nstore.dispatch(initGame(MAX_PAIRS));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n"],"sourceRoot":""}